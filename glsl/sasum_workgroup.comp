#version 450
#extension GL_EXT_shader_atomic_float: enable

// sasum operation:
// - subgroup operations
// + atomics
// - inter-workgroup buffer

// Unlike 'sasum_global' this carries out a reduction within each workgroup,
//  then adds the sums of the workgroups to the total.
// I beleive by avoiding usage of inter-workgroup memory this approach should be faster.

// I beleive this is the 2nd best (2nd fastest) version of sasum.

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) buffer Inputs {
    float x[];
};

layout(binding = 1) buffer Output {
    float sum; // total sum
};

shared float sdata[1024];

void main() {
    const uint indx = gl_LocalInvocationID.x; // Gets invocation index within the workgroup

    // Applies abs to all inputs
    x[indx] = abs(x[indx]);
    
    int space = 512; // = 1024/2

    barrier();
    
    // This is effectively the first iteration
    if (indx < space) {
        sdata[indx] = x[2*indx] + x[2*indx+1];
    }

    const int logLen = 10; // = int(log2(1024))

    // The logic here is fairly tricky.
    // I read a paper and some explanation by some nvidia guy when I learned it, I can't find these anymore,
    //  but I made a diagram of an example, pls see 'sasum.png'
    for(int d=2; d<=logLen; d++) {
        space = 1024/(2^d);
        barrier(); // Waits till every invocation has finished this layer to begin next
        if (indx < space) {
            sdata[indx] = sdata[2*indx] + sdata[2*indx+1];
        }
    }

    barrier();

    // For 1 invocation in the workgroup, adds the workgroup sum to the total sum
    if(gl_LocalInvocationID.x == 0) atomicAdd(sum,sdata[0]);
}