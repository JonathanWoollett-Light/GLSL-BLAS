#version 450
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// For explanation of how summation works pls see 'sasum_subgroup.comp'.
// Other than that, it's pretty simple.

// 'sdot_partial' multiplies all invocations component-wise and sums in workgroups (1024) segments,
//  after which it is neccessary to call 'sum_partial' to sum the workgroup sums, if need be, multiple times.

layout(binding = 0) buffer Buffer0 {
    float x[];
};
layout(binding = 1) buffer Buffer1 {
    float y[];
};
layout(binding = 2) buffer Output {
   float total[]; // len(total) = len(x) / local_size_x
};

const int sumSubGroupSize = 64; // = workgroup size / subgroup size = 1024 / 64
shared float sdata[sumSubGroupSize];

void main() {
    uint indx = gl_GlobalInvocationID.x;
    float sum = total[gl_GlobalInvocationID.x]; // x âŠ™ j (vector dot product = matrix hadamard product + summation)

    sum = subgroupAdd(sum);

    if (subgroupElect()) sdata[gl_SubgroupID] = sum;

    barrier();

    if (gl_SubgroupID == 0) {
        sum = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID] : 0;
        sum = subgroupAdd(sum);
    }
    
    // For 1 invocation in the workgroup, the workgroup
    if (gl_LocalInvocationID.x == 0) total[gl_WorkGroupID.x] = sum;
}